// Grid

@mixin make-container() {
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
  margin-right: auto;
  margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}


@mixin make-row() {
  margin-right: ($grid-gutter-width / -2);
  margin-left: ($grid-gutter-width / -2);
}


@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

@mixin make-col($size, $columns: $grid-columns) {
  width: percentage($size / $columns);
}


@mixin make-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  %grid-column {
    position: relative;
    float: left;
    min-height: 1px;
    padding-right: ($gutter / 2);
    padding-left: ($gutter / 2);
    width: 100%;
  }
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
      @if ($infix == "") {
        .col-xs-#{$i} {
          @extend %grid-column;
        }
      }
    }

    .col#{$infix},
    .col#{$infix}-#{$columns} {
      @extend %grid-column;
    }
    @if ($infix == "") {
      .col-xs,
      .col-xs-#{$columns} {
        @extend %grid-column;
      }
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }

        @if ($infix == "") {
          .col-xs-#{$i} {
            @include make-col($i, $columns);
          }
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($i == 0) { // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i},
          .col-offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
          @if ($infix == "") {
            .offset-xs-#{$i},
            .col-offset-xs-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}





@mixin make-flex-row() {
  display: flex;
  flex-wrap: wrap;
}


@mixin make-flex-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-flex-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}


@mixin make-flex-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-flex-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: ($gutter / 2);
    padding-left: ($gutter / 2);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-flex-column;
      }
      @if ($infix == "") {
        .col-xs-#{$i} {
          @extend %grid-flex-column;
        }
      }
    }
    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-flex-column;
    }
    @if ($infix == "") {
      .col-xs,
      .col-xs-auto {
        @extend %grid-flex-column;
      }
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; // Reset earlier grid tiers
      }

      @if ($infix == "") {
        .col-xs {
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
        }
        .col-xs-auto {
          flex: 0 0 auto;
          width: auto;
          max-width: none;
        }
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-flex-col($i, $columns);
        }

        @if ($infix == "") {
          .col-xs-#{$i} {
            @include make-flex-col($i, $columns);
          }
        }
      }

      // order: flex special
      .order#{$infix}-first { order: -1; }

      .order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} { order: $i; }
      }

      @if ($infix == "") {
        .order-xs-first { order: -1; }

        .order-xs-last { order: $columns + 1; }

        @for $i from 0 through $columns {
          .order-xs-#{$i} { order: $i; }
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($i == 0) { // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i},
          .col-offset#{$infix}-#{$i} {
            @include make-flex-col-offset($i, $columns);
          }
          @if ($infix == "") {
            .offset-xs-#{$i},
            .col-offset-xs-#{$i} {
              @include make-flex-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}



