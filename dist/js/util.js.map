{"version":3,"sources":["../../src/js/util.js"],"names":["Util","$","transition","MAX_UID","TRANSITION_END","MILLISECONDS_MULTIPLIER","toType","obj","toString","call","match","toLowerCase","getSpecialTransitionEndEvent","bindType","delegateType","handle","event","target","is","handleObj","handler","apply","arguments","undefined","transitionEndTest","window","QUnit","end","transitionEndEmulator","duration","called","one","setTimeout","triggerTransitionEnd","setTransitionEndSupport","fn","emulateTransitionEnd","supportsTransitionEnd","special","getUID","prefix","Math","random","document","getElementById","getSelectorFromElement","element","selector","getAttribute","$selector","find","length","err","getTransitionDurationFromElement","transitionDuration","css","floatTransitionDuration","parseFloat","split","reflow","offsetHeight","trigger","Boolean","isElement","nodeType","typeCheckConfig","componentName","config","configTypes","property","Object","prototype","hasOwnProperty","expectedTypes","value","valueType","RegExp","test","Error","toUpperCase"],"mappings":"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","file":"util.js","sourcesContent":["import $ from 'jquery';\n\n\nconst Util = (($) => {\n    let transition = false;\n\n    const MAX_UID = 1000000;\n    const TRANSITION_END = 'transitionend';\n    const MILLISECONDS_MULTIPLIER = 1000;\n\n    // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n    function toType(obj) {\n        return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase()\n    }\n\n    function getSpecialTransitionEndEvent() {\n        return {\n            bindType: TRANSITION_END,\n            delegateType: TRANSITION_END,\n            handle(event) {\n                if ($(event.target).is(this)) {\n                    return event.handleObj.handler.apply(this, arguments) // eslint-disable-line prefer-rest-params\n                }\n                return undefined // eslint-disable-line no-undefined\n            }\n        }\n    }\n\n    function transitionEndTest() {\n        if (typeof window !== 'undefined' && window.QUnit) {\n            return false;\n        }\n\n        return {\n            end: 'transitionend'\n        };\n    }\n\n    function transitionEndEmulator(duration) {\n        let called = false;\n\n        $(this).one(Util.TRANSITION_END, () => {\n            called = true;\n        });\n\n        setTimeout(() => {\n            if (!called) {\n                Util.triggerTransitionEnd(this);\n            }\n        }, duration);\n\n        return this;\n    }\n\n    function setTransitionEndSupport() {\n        transition = transitionEndTest();\n\n        $.fn.emulateTransitionEnd = transitionEndEmulator;\n\n        if (Util.supportsTransitionEnd()) {\n            $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();\n        }\n    }\n\n    const Util = {\n\n        TRANSITION_END: 'tuiTransitionEnd',\n\n        getUID(prefix) {\n            do {\n                prefix += ~~(Math.random() * MAX_UID);\n            } while (document.getElementById(prefix));\n            return prefix;\n        },\n\n        getSelectorFromElement(element) {\n            let selector = element.getAttribute('data-target');\n            if (!selector || selector === '#') {\n                selector = element.getAttribute('href') || '';\n            }\n\n            try {\n                const $selector = $(document).find(selector);\n                return $selector.length > 0 ? selector : null;\n            } catch (err) {\n                return null;\n            }\n        },\n\n        getTransitionDurationFromElement(element) {\n            if (!element) {\n                return 0;\n            }\n\n            // Get transition-duration of the element\n            let transitionDuration = $(element).css('transition-duration');\n            const floatTransitionDuration = parseFloat(transitionDuration);\n\n            // Return 0 if element or transition duration is not found\n            if (!floatTransitionDuration) {\n                return 0;\n            }\n\n            // If multiple durations are defined, take the first\n            transitionDuration = transitionDuration.split(',')[0];\n\n            return parseFloat(transitionDuration) * MILLISECONDS_MULTIPLIER;\n        },\n\n        reflow(element) {\n            return element.offsetHeight;\n        },\n\n        triggerTransitionEnd(element) {\n            $(element).trigger(transition.end);\n        },\n\n        supportsTransitionEnd() {\n            return Boolean(transition);\n        },\n\n        isElement(obj) {\n            return (obj[0] || obj).nodeType;\n        },\n\n        typeCheckConfig(componentName, config, configTypes) {\n            for (const property in configTypes) {\n                if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n                    const expectedTypes = configTypes[property];\n                    const value         = config[property];\n                    const valueType     = value && Util.isElement(value)\n                        ? 'element' : toType(value);\n\n                    if (!new RegExp(expectedTypes).test(valueType)) {\n                        throw new Error(\n                            `${componentName.toUpperCase()}: ` +\n                            `Option \"${property}\" provided type \"${valueType}\" ` +\n                            `but expected type \"${expectedTypes}\".`);\n                    }\n                }\n            }\n        }\n    }\n\n    setTransitionEndSupport();\n\n    return Util;\n})($);\n\nexport default Util;\n"]}